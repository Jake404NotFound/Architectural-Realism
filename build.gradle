plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.21'
}

version = '0.1.0'
group = 'com.jake404notfound.architecturalrealism'
archivesBaseName = 'architecturalrealism'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/NeoForged/NeoForm/blob/main/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from NeoForged
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    mappings channel: 'official', version: '1.21.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            mods {
                architecturalrealism {
                    source sourceSets.main
                }
            }
        }
        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'architecturalrealism'
        }
        server {
            property 'forge.enabledGameTestNamespaces', 'architecturalrealism'
            args '--nogui'
        }
        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', 'architecturalrealism'
        }
        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'architecturalrealism', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // NeoForge Maven repository
    maven {
        url = 'https://maven.neoforged.net/releases'
    }
    // Maven Central is automatically added by Gradle
    mavenCentral()
    // If you have mod dependencies in other maven repositories, add them here
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "jar" artifact.
    // The "client" and "server" here are legacy names and do not represent the side.
    minecraft 'net.neoforged:forge:1.21.1-47.1.0'
    
    // Example mod dependency with JEI
    // implementation fg.deobf('mezz.jei:jei-1.21.1-forge:17.0.0.30')
    
    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code adds the ability to generate a mod_data.json file in the META-INF folder of the mod jar.
// This file is used by the NeoForged installer to determine the mod's ID, version, name, and description.
// It also adds the ability to generate a mods.toml file in the META-INF folder of the mod jar.
// This file is used by NeoForged to determine the mod's ID, version, name, description, and dependencies.
// The mods.toml file is the primary way to declare metadata for your mod, and it is required.
// The mod_data.json file is used by the installer, and it is optional.
// You can customize the mods.toml file by editing the file directly, or by extending the task with your own configuration.
// You can learn more about the mods.toml file here: https://neoforged.net/docs/1.21.1/gettingstarted/modfiles/
tasks.named('jar', Jar).configure {
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
