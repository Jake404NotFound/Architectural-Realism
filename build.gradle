plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.21'
}

version = '0.1.0'
group = 'com.jake404notfound.architecturalrealism'
archivesBaseName = 'architecturalrealism'

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}"

// Force all tasks to use Java 21
tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Force the createMinecraftArtifacts task to use Java 21
tasks.withType(JavaExec).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

neoForge {
    // Specify the version of NeoForge to use
    version = project.neo_version
    
    // Parchment mappings for better parameter names
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    
    // Default run configurations
    runs {
        client {
            client()
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', 'architecturalrealism'
        }
        
        server {
            server()
            systemProperty 'neoforge.enabledGameTestNamespaces', 'architecturalrealism'
            programArgument '--nogui'
        }
        
        // This run config launches GameTestServer and runs all registered gametests, then exits.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', 'architecturalrealism'
        }
        
        data {
            data()
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', 'architecturalrealism', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        
        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            systemProperty 'forge.logging.console.level', 'debug'
            
            // Note: Working directory is set by default, no need to specify it explicitly
        }
    }
    
    // Define mod <-> source bindings
    mods {
        architecturalrealism {
            sourceSet sourceSets.main
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // NeoForge Maven repository
    maven {
        url = 'https://maven.neoforged.net/releases'
    }
    // Maven Central is automatically added by Gradle
    mavenCentral()
    // If you have mod dependencies in other maven repositories, add them here
}

dependencies {
    // No need to specify Minecraft dependency here, it's handled by the plugin
}

// This block of code adds the ability to generate a mod_data.json file in the META-INF folder of the mod jar.
// This file is used by the NeoForged installer to determine the mod's ID, version, name, and description.
// Note: The reobfJar task reference has been removed as it's not part of NeoForge 1.0.21

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
